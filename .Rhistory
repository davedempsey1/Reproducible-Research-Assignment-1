a
available.packages()
head(rownames(a), 3)
a <- available.packages()
head(rownames(a), 3)
install.packages("slidify")
install.packages(c("slidify", "ggplot2", "devtools"))
source("http://bioconductor.org/biocLite.R")
BiocLite(c("GenomicFeatures", "AnnotationDbi"))
biocLite(c("GenomicFeatures", "AnnotationDbi"))
q()
head(rownames(a), 3) ## Show the anmes of the first few packages
install.packages("slidify")
install.packages(c("slidify", "ggplot2", "devtools"))
install.packages("slidify")
chooseCRANmirror()
install.packages("slidify")
q()
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite()
biocLit(c("Genomic Features", "Annotation Dbi"))
biocLite(c("Genomic Features", "Annotation Dbi"))
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
x <-c(1,3,5)
y <-c(3,2,10)
rbind((x,y))
rbind(x,y)
x <-list(2,"a","b",TRUE)
x[[2]]
x <-1:4
y <-2:3
x+y
x<-c(3,5,1,10,12,6)
x[x %in% 1:5]<-0
x[X>0]<-6
x<-c(3,5,1,10,12,6)
x[X>0]<-6
x[x==0]<-6
x<-c(3,5,1,10,12,6)
x[x!=6]<-0
dim(hw1_data.csv)
load(hw1_data.csv)
hw1_data <- read.csv("C:/Users/David/Desktop/Data Scientist Specialization Certificate/R-programming/hw1_data.csv")
View(hw1_data)
read.csv(hw1_data)
subset(x,1:2)
help subset()
help("subset")
x[subsetx,<=2]
bar <- subset(foo, location <= 2)
hw1_data[c(1,2)]
hw1_data[c(1, 2),]
hw1_data[c(152, 153),]
hw1_data[c(47),]
sapply(hw1_data, function(x) sum(is.na(x)))
x<-hw1_data
x
x<-x[!is.na(x)]
result<-colMeans(x)
colmeans(x)
colMeans(x, na.rm = FALSE)
colMeans(x)
x<-hw1_data
colMeans(x, na.rm = TRUE, dims = 1L)
names(x)
x.sub1(x, Ozone > 31 & Temp > 90)
x.sub1<-subset(x, Ozone > 31 & Temp > 90)
colMeans(x.sub1, na.rm = TRUE, dims = 1L)
x.sub2<-subset(x, Month == 6)
colMeans(x.sub2, na.rm = TRUE, dims = 1L)
x.sub3<-subset(x, Month == 5)
x.sub3
y<-c(3,5,1,10,126)
y<-c(3,5,1,10,12,6)
y[y!=6]<-0
y
y<-c(3,5,1,10,12,6)
y[y %in% 1:5]<-0
y
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-01"))
unclass(as.Date("1970-01-02"))
X<-Sys.time()
x
p<-as.POSIXlt(x)
names(unclass(p))
p$sec
source('~/.active-rstudio-document')
cube(3)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
z <- 10
f(3)
source('~/.active-rstudio-document')
y
View(hw1_data)
View(hw1_data)
View(x.sub1)
View(x.sub2)
View(x.sub2)
View(x.sub3)
View(x.sub3)
View(x.sub3)
swirl()
load(swirl)
install.packages("swirl")
load(swirl)
swirl()
load(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
install_from_swirl(Exploratory Data Analysis)
install_from_swirl("Exploratory Data Analysis")
swirl()
sample(colors())
sample(colors(),10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
colorRampPalette(c("red","blue"))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
pal(seq(0,1,len=6))
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
p2(2)
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"),alpha=0.5)
p3(5)
plot(x,y,print(pch=19),col=(rgb(0,.5,.5)))
plot(x,y,pch=19,col=(rgb(0,.5,.5)))
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5,.3))
brewer.pal(3,"BuGn")
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(p1(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg),aes=drv
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv),geom=(c("point","smooth"))
qplot(displ,hwy,data=mpg,color=drv,geom=(c("point","smooth"))
)
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(y=hwy,data=mpg,color=drv)
myhigh
plot(drv,hwy,data=mpg,geom="boxplot")
plot(split=drv,hwy,data=mpg,geom="boxplot")
skip()
qplot(drv,hwy,data=mpg,geom="boxplot",color=manufacturer)
qplot(count=hwy,data=mpg,fill=drv)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,ethod="loess")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv)
library(method)
install.packages(ggplot2)
exit
skip()
swirl()
install.packages(ggplot2)
install.packages(ggplot)
install.packages(gpplot1)
install.packages(gpplot2)
install.packages("gpplot2")
library(ggplot2)
swirl()
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),facets=.~drv,method="loess")
next()
info()
skip()
swirl()
skiP()
skip
skip()
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/cameras.csv",method="curl")
cameraData <- read.csv("./data/cameras.csv")
names(cameraData)
mylist <- list(letters = c("A", "b", "c"), numbers = 1:3, matrix(1:25, ncol = 5))
head(mylist)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year()
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989-05-17")
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1-9-2012")
ymd("1920/1/2")
dt1
hmd_hms(dt1)
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update()
update(this_moment)
update("this_moment", date)
update(this_moment, exact = TRUE)
skip()
this_moment
nyc <- now()
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
update(depart, hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz("Asia/Hong_Kong")
skip()
arrive
skip()
last_time
?new_interval()
?new_interval
how_long <- new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
library(ggplot2)
library(plyr)
setwd("C:/Users/David/Desktop/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
unzip("activity.zip")
activity <- read.csv("activity.csv")
unzip("activity.zip")
activity$day <- weekdays(as.Date(activity$date))
activity$DateTime<- as.POSIXct(activity$date, format="%Y-%m-%d")
clean <- activity[!is.na(activity$steps),]
hist(sumTable$Steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
sumTable <- aggregate(activity$steps ~ activity$date, FUN=sum, )
colnames(sumTable)<- c("Date", "Steps")
hist(sumTable$Steps, breaks=5, xlab="Steps", main = "Total Steps per Day")
mean(sumTable$Steps)
median(sumTable$Steps)
head(activity)
intervalTable <- ddply(clean, .(interval), summarize, Avg = mean(steps))
p <- ggplot(intervalTable, aes(x=interval, y=Avg), xlab = "Interval", ylab="Average Number of Steps")
p + geom_line()+xlab("Interval")+ylab("Average Number of Steps")+ggtitle("Average Number of Steps per Interval")
maxSteps <- max(intervalTable$Avg)
intervalTable[intervalTable$Avg==maxSteps,1]
nrow(activity[is.na(activity$steps),])
avgTable <- ddply(clean, .(interval, day), summarize, Avg = mean(steps))
nadata<- activity[is.na(activity$steps),]
newdata<-merge(nadata, avgTable, by=c("interval", "day"))
newdata2<- newdata[,c(6,4,1,2,5)]
colnames(newdata2)<- c("steps", "date", "interval", "day", "DateTime")
mergeData <- rbind(clean, newdata2)
sumTable2 <- aggregate(mergeData$steps ~ mergeData$date, FUN=sum, )
colnames(sumTable2)<- c("Date", "Steps")
mean(sumTable2$Steps)
median(sumTable2$Steps)
hist(sumTable2$Steps, breaks=5, xlab="Steps", main = "Total Steps per Day with NAs Fixed", col="Black")
hist(sumTable$Steps, breaks=5, xlab="Steps", main = "Total Steps per Day with NAs Fixed", col="Grey", add=T)
legend("topright", c("Imputed Data", "Non-NA Data"), fill=c("black", "grey") )
library(lattice)
intervalTable2 <- ddply(mergeData, .(interval, DayCategory), summarize, Avg = mean(steps))
mergeData$DayCategory <- ifelse(mergeData$day %in% c("Saturday", "Sunday"), "Weekend", "Weekday")
intervalTable2 <- ddply(mergeData, .(interval, DayCategory), summarize, Avg = mean(steps))
xyplot(Avg~interval|DayCategory, data=intervalTable2, type="l",  layout = c(1,2),main="Average Steps per Interval Based on Type of Day", ylab="Average Number of Steps", xlab="Interval")
source('C:/Users/David/Desktop/RepData_PeerAssessment1/PA1_template.R')
library(knitr)
install.packages("knitr")
library(knitr)
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
